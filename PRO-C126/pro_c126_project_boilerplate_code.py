# -*- coding: utf-8 -*-
"""PRO-C125-Project-Boilerplate-Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g4AJgJOlGqYteYaA_T2Yxbekdy_Y4u-j

**Archery-Target** is a game in which the players shoot sharp-pointed arrows at a round target having 10 rings.

<img src="https://s3-whjr-curriculum-uploads.whjr.online/4de9132a-c71d-42ce-9099-3293e8805fd9.jpg">

## RL Problem to Solve
Hit the center of the target with maximum reward

<img src="https://s3-whjr-curriculum-uploads.whjr.online/40656a8c-14e2-4dd7-9f9e-4c17669b9182.png" width=300>


Number of **State**: ?

Number of **Actions**: ?
"""

#import libraries

"""## Reward Matrix
Reward Matrix represents states as rows and actions as columns with respective awards values assigned for a given state and action pair.
"""

#Define reward matrix

"""## Take Action Randomly"""

#Define shoot()

"""##Q-matrix

**Q-learning** is a reinforcement learning algorithm. Given the current state, it helps to find the best action to be taken by the agent.

**Q-matrix** represents reward received after a taking particular action in the current state. Initially, all the elements of the Q-matrix are zeroes.

"""

#Create Q-matrix

"""##Take Action"""

#Define take_action

def take_action(reward_matrix):

     #Call the shoot() function to get the action

     #Print the action

     #Get the corresponding reward using Reward matrix

     #Print reward

     return action, reward

#Call take_action function